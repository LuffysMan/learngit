廖雪峰lec1：创建版本库
cd E:/cuiyue/T_Git
mkdir learngit
pwd
git init
git add readme.txt
git commit -m "first commit"

廖雪峰Lec2：修改文件并提交
git status					//查看本地与远程是否一致
git diff readme.txt			//查看差别细节
git add readme.txt			//add after modify
git add lxfcourse.txt
git status
git commit -m "liaoxuefeng course stury"

廖雪峰Lec3：版本回退
git log 						//查看提交历史记录
git log --pretty=oneline		//历史记录简洁显示
git reset --hard HEAD^			//回到上次版本，HEAD^^表示上上次版本，HEAD~100上100次
git reset --hard c997			//回到指针C997XXX指向的版本
git reflog						//查看命令历史

廖雪峰Lec4：工作区和暂存区
vi license.txt					//创建文件(i:编辑模式，esc：命令模式；命令模式下q:退出编辑，q!：强制退出编辑，x:退出编辑并保存)
git status
git add license.txt
git status
git commit -m "understand how stage works"
git status

廖雪峰Lec5：管理修改
//第一次修改readme.txt
git add readme.txt
//次二次修改readme.txt
git commit -m "understand modify"		//第二次修改并没有提交,提交的是第一次的修改

廖雪峰Lec6：撤销修改
//修改readme.txt
git checkout -- readme.txt				//撤销工作区修改
//修改readme.txt
git add readme.txt
git reset HEAD readme.txt				//撤销add操作，离开stage，返回工作区
git checkout -- readme.txt				//撤销工作区修改

廖雪峰Lec7：删除文件
//查看当前工作区文件列表
ls
//随便创建一个新文件
vi test.txt
git add test.txt
git commit -m "add test.txt"
rm test.txt								//删除本地文件，但是远程仓库还在
git status								//提示不一致
git rm test.txt
git commit -m "delete test.txt"			//从远程仓库删除
//如果不小心误删了文件，可以从远程仓库恢复
git checkout --text.txt

学习笔记第二篇：本地仓库和远程仓库
廖雪峰Lec8：创建一个远程仓库(你可以自己搭建Git服务器，不过大家一般用Github~~)
//1.创建SSH Key
ssh-keygen -t rsa -C "youremail@example.com"		//在C:\Users\Administrator\.ssh下有id_rsa和id_rsa.pub两个文件	
//2.登陆GitHub，打开“Account settings”，“SSH Keys”页面点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
//3.点“Add Key”，你就应该看到已经添加的Key，这样就可以往Github远程仓库存东西了吧哈哈

廖雪峰Lec9：添加远程库(把远程仓库和本地仓库关联起来，并将本地仓库的东西推送到远程库)
先登录网页版github创建一个repository，命名为learngit
git add remote origin git@github.com:LuffysMan/learngit.git 	//这里origin就是我们在本地对远程仓库的命名，可以起其他名字，比如learngitRemote也可
git push -u origin master		//把本地分支master推送到远程库origin，参数-u只在第一次推送使用
在本地修改文件readme.txt，然后
git add readme.txt
git commit -m "添加远程库测试"
git push origin master				//把本地修改推送到Github
//第一次添加远程库时，可能会出现SSH警告,让你选yes/no,选yes即可，具体可看廖老师课程			
廖雪峰Lec10：从远程库克隆
登录github网页版，创建新repository，命名为gitskills并勾选“initialized with readme.md”
git clone git@github.com:LuffysMan/gitskills.git  		//在本地合适的位置克隆远程库
cd gitskills/
ls  													//查看本地，readme.md已经有了

学习笔记第三篇：分支管理
廖雪峰Lec11：创建和管理分支
git branch dev							//创建分支命名为：dev
git checkout dev						//将指针HEAD由当前分支切换到dev
git branch 								//查看当前分支目录，应该有master和dev
cat readme.txt 							//查看内容，记为view1
修改readme.txt
git add readme.txt
git commit -m "branch test"				//对readme.txt修改提交到当前分支dev

git checkout master						//切换到master
cat readme.txt 							//查看内容，可以发现与view1相同

git merge dev 							//将分支dev合并到当前分支master
git branch -d dev 						//删除分支dev
git branch								//只剩下master

小结
Git鼓励大量使用分支：
查看本地分支：git branch
查看本地和远程分支：git branch -a
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


廖雪峰Lec12：解决冲突
git checkout -b feature1 				//创建并切换分支
修改readme.txt 							//记为修改1
git add readme.txt
git commit -m "modification1"

git checkout master 					//切换到master
修改readme.txt 							//记为修改2
git add readme.txt
git commit -m "modification2"

git merge feature1 						//合并分支，此处会提示冲突，因为master和feature1内容为两个版本
git status								//status也会提示有冲突
cat readme.txt
vi readme.txt 							//查看并手动解决冲突
git add readme.txt
git commit -m "fixed conflict"			//解决冲突重新提交

git log --graph --pretty=oneline --abbrev-commit  	//用带参数的git log 查看分支的合并情况
git branch -d feature1					//删除分支feature1

廖雪峰Lec13：分支管理策略
git checkout -b dev						//创建新分支
vi readme.txt  							//修改readme.txt
git add readme.txt
git commit -m "add merge"

git checkout master	  					//切换回master
git merge --no-ff -m "merge with no-ff" dev 		//使用带参数的merge，no-ff表示不适用fastforward
git log --graph --pretty=oneline --abbrev-commit	//查看分支合并情况

小结
1.实际开发中，master应该是非常稳定的一个分支，只用来发布新版本，平时不能在上面干活；
干活都是在dev分支上，也就是说dev分支是不稳定的，小伙伴们时不时更新dev，发布1.0版本时再合并到master上；
小伙伴们各自建立自己的分支比如：LuffysMan,Lisann
2.合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

廖雪峰Lec14:Bug分支
//假设当前正在进行readme.txt 2.0版本的制作，处于分支dev，突然接到代号101bug修复任务，要求紧急修复master上readme.txt的一个bug
git status 								//处于分支dev,且readme.txt 已被修改
git stash 								//保存当前工作状态到另一个。。平行宇宙吧
git status 								//查看状态，工作区是干净的

git checkout master						//在master上创建issue101分支用来修复bug
git checkout -b issue101				
vi readme.txt 							//修复bug
git add readme.txt
git commit -m "fix bug101"
git checkout master
git merge --no-ff -m "merged bug fix 101" issue101	//合并分支到master
git branch -d issue101

git checkout dev						//切换回dev准备继续readme.txt 2.0版本的制作~~
git status 								//发现工作区是空的
git stash list 							//查看保存到平行宇宙的工作
git stash pop 							//从平行宇宙取回工作哈哈
git stash list 							//平行宇宙里面是空的

小结
对此场景有疑问的，我觉得这个网友的说法还挺好滴（下面内容来自Shi_Chunyuan）
1、master 上面发布的是A的1.0版本
2、dev 上开发的是A的2.0版本
3、这时，用户反映 1.0版本存在漏洞，有人利用这个漏洞开外挂
4、需要从dev切换到master去填这个漏洞，正常必须先提交dev目前的工作，才能切换。
5、而dev的工作还未完成，不想提交，所以先把dev的工作stash一下。然后切换到master
6、在master建立分支issue101并切换.
7、在issue101上修复漏洞。
8、修复后，在master上合并issue101
9、切回dev，恢复原本工作，继续工作。

补充：git stash pop 等同于 git stash apply, git stash drop


























